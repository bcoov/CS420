CS420                                                       Ben Coover
HW4
To be submitted in class.


1) Suppose that the following processes arrive for execution at the times indicated.
Each process will run for the amount of time listed.  In answering the questions,
use nonpreemptive scheduling, and base all decisions on the information you have at
the time the decision must be made.


    Process    Arrival Time    Burst Time
    -------    ------------    ----------
      P1           0.0            8
      P2           0.4            4
      P3           1.0            1

a) What is the average turnaround time for these processes with the FCFS scheduling
   algorithm?

    Execution order: P1 -> P2 -> P3

    (8 + (8 - 0.4 + 4) + (12 - 1 + 1)) / 3 =
    (8 + 11.6 + 12) / 3 =
    31.6 / 3 = 10.53


b) What is the average turnaround time for these processes with the SJF scheduling
   algorithm?

    Execution order: P1 -> P3 -> P2

    (8 + (8 - 1 + 1) + (9 - 0.4 + 4)) / 3 =
    (8 + 8 + 12.6) / 3 =
    28.6 / 3 = 9.53


2) Why is it important for the scheduler to distinguish I/O-bound programs from
   CPU-bound programs?

   It is important for I/O-bound programs to be able to finish and read/write processes
   before being pre-empted to maintain data integrity. CPU-bound programs will
   typically be able to complete their work very quickly and can be swapped in while
   an I/O-bound program is waiting on an I/O operation.


3) Consider the following set of processes, with the length of the CPU burst given in
   milliseconds:

    Process    Burst Time    Priority
    -------    ----------    --------
      P1           10            3
      P2            1            1
      P3            2            3
      P4            1            4
      P5            5            2
      

The processes are assumed to have arrived in the order P1, P2, P3, P4, P5, all at
time 0.

a) Draw four Gantt charts that illustrate the execution of these processes using the
   following scheduling algorithms: FCFS, SJF, nonpreemptive priority (a smaller
   priority number implies a higher priority), and RR (quantum=1). In cases where you
   have a tie, choose the process with the smaller process number first.
    
    FCFS:   |_____P1_____|_P2_|__P3__|_P4_|___P5___|
            0           10   11     13   14       19
    SJF:    |_P2_|_P4_|__P3__|___P5___|_____P1_____|
            0    1    2      4        9           19
    PRIOR:  |_P2_|___P5___|__P3__|_____P1_____|_P4_|
            0    1        6      8           18   19
    RR:     |P1|P2|P3|P4|P5|P1|P3|P5|P1|P5|P1|P5|P1|P5|P1|P1|P1|P1|P1|
            0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19

b) What is the turnaround time of each process for each of the scheduling algorithms
   in part a?

    FCFS:   P1 - 0 + 10 ms
            P2 - 10 + 1 ms
            P3 - 11 + 2 ms  Total - 67 ms
            P4 - 13 + 1 ms
            P5 - 14 + 5 ms

    SJF:    P1 - 9 ms + 10 ms
            P2 - 0 ms + 1 ms
            P3 - 2 ms + 2 ms Total - 35 ms
            P4 - 1 ms + 1 ms
            P5 - 4 ms + 5 ms

    PRIOR:  P1 - 8 ms + 10 ms
            P2 - 0 ms + 1 ms
            P3 - 6 ms + 2 ms  Total - 52 ms
            P4 - 18 ms + 1 ms
            P5 - 1 ms + 5 ms

    RR:     P1 - 9 ms + 10 ms
            P2 - 1 ms + 1 ms
            P3 - 5 ms + 2 ms Total - 46 ms
            P4 - 3 ms + 1 ms
            P5 - 9 ms + 5 ms

c) What is the waiting time of each process for each of these scheduling algorithms?
    
    FCFS:   P1 - 0 ms
            P2 - 10 ms
            P3 - 11 ms  Total - 48 ms
            P4 - 13 ms
            P5 - 14 ms

    SJF:    P1 - 9 ms
            P2 - 0 ms
            P3 - 2 ms  Total - 16 ms
            P4 - 1 ms
            P5 - 4 ms

    PRIOR:  P1 - 8 ms
            P2 - 0 ms
            P3 - 6 ms  Total - 33 ms
            P4 - 18 ms
            P5 - 1 ms

    RR:     P1 - 9 ms
            P2 - 1 ms
            P3 - 5 ms  Total - 27 ms
            P4 - 3 ms
            P5 - 9 ms


d) Which of the algorithms results in the minimum average waiting time (over all
   processes)?

    In this scenario, Shortest Job First (SJF) provides the shortest avg wait (3.2 ms)


4) Which of the following scheduling algorithms could result in starvation?

 a) First-come, first served
 b) Shortest job first
 c) Round robin
 d) Priority

    Shortest Job First and Priority could both result in starvation. For SJF, if there
    is always a shorter job in the queue, and for Priority, if there is always a higher
    priority job in the queue.


5) Consider a variant of the RR scheduling algorithm in which the entries in the ready
   queue are pointers to the PCBs.

 a) What would be the effect of putting two pointers to the same process in the ready
    queue?

    - Since there would be two pointers to the same process, it would effectively
      receive twice the amount of CPU time as all the others in the queue.

 b) What would be two major advantages and two disadvantages of this scheme?

    Pros:
     - Assuming it is not the only process for the duration of its working time,
       the double-pointered process would finish in half the time it normally would
       due to having twice the periods on the CPU
     - ?
    Cons:
     - Redundant memory usage (identical pointers)
     - Could delay other important processes too long causing an overall system slowdown

 c) How would you modify the basic RR algorithm to achieve the same effect without the
    duplicate pointers?

    - A priority system could be added that would allow a process to run for a second
      quantum period (or more) if its priority value is high enough

