CS420                                                           Ben Coover
HW6
To be submitted in class.


1) Given five memory partitions of 100 KB, 500 KB, 200 KB, 300 KB, and 
600 KB (in order), how would each of the first-fit, best-fit, and worst-fit 
algorithms place processes of 212 KB, 417 KB, 112 KB, and 426 KB (in order)? 
Which algorithm makes the most efficient use of memory?

        |_100_|___500__|__200__|_300__|___600___|
First:  |     |212(1)--|112(3)-|      |417(2)---|   426(4, waiting for space)
Best:   |     |417(2)--|112(3)-|212(1)|426(4)---|
Worst:  |     |414(2)--|       |112(3)|212(1)---|   426(4, waiting for space)

Given the order that the processes arrive, the Best-Fit algorithm would give the
most efficient usage of the available memory partitions. It is also the only
option of the three that avoids making a process wait for available memory.

2) Assuming a 1 KB (1024 bytes) page size, what are the page numbers and offsets for 
the following address references (provided as decimal numbers).  Assume that 
both pages and page offsets are indexed starting at 0.  That is, the first 
page is page 0.  

    page size = 1024 = 2^10 => n = 10 bits (offset)
    Assuming 32 available bits for physical addresses (m = 32 bits)
    p = 12, d = 10

    a) 2375
        page 2, offset 375
    b) 19366
        page 18, offset 934
    c) 30000
        page 29, offset 304
    d) 256
        page 0, offset 256
    e) 16385
        page 16, offset 1

3) Consider a logical address space of 32 pages with 1024 bytes per page; 
mapped onto a physical memory of 16 frames.

    a) How many bits are required in the logical address?
        16 bits (32 x 1024 = 32,768 = 2^16)
    b) How many bits are required in the physical address?
        The same number

4) Consider a paging system with the page table stored in memory.

    a) If a memory reference takes 200 nanoseconds, how long does a paged 
       memory reference take?
       - 200 nanoseconds + however long it takes the system to determine the location
         of the required memory page and swap it into physical memory

    b) If we add associative registers, and 75 percent of all page-table 
       references are found in the associative registers, what is the effective 
       memory reference time? (Assume that finding a page-table entry in the 
       associative registers takes zero time if the entry is there.)
       - 0 nanoseconds


