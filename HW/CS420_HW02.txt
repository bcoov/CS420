CS420                                                       Ben Coover
HW2
To be submitted in class.

1) Including the initial parent process, how many processes are created
by the program shown below?  Briefly explain how you arrived at your answer.

    #include <stdio.h>
    #include <unistd.h>

    int main()
    {
        /* fork a child process */
        fork();

        /* fork another child process */
        fork();

        /* and fork another */
        fork();

        return 0;
    }

    PARENT
    |
    |
#1  FORK-------------------------
    |                           |
    |                           |
#2  FORK-------------           FORK-------------
    |               |           |               |
    |               |           |               |
#3  FORK-----       FORK-----   FORK-----       FORK-----
    |       |       |       |   |       |       |       |
    1       2       3       4   5       6       7       8

    Each fork() call creates a child process, which continues execution of the
    program from after the fork call. As the additional fork() calls are done by
    the increasing number of processes, the final count of created processes will
    be 7, for a total of 8 processes including the parent.

2) Using the program below, identify the values of pid at lines A, B, C, and D.
(Assume that the actual pids of the parent and child are 2600 and 2603, respectively.) 
Explain how you arrived at your answer.

    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>

    int main()
    {
        pid_t pid, pid1;

        /* fork a child process */
        pid = fork();

        if (pid < 0) {  /* error occurred */
            fprintf(stderr, "Fork Failed");
            return 1;
        }
        else if (pid == 0) {  /* child process */
            pid1 = getpid();
            printf("child: pid = %d", pid);    /* A */
            printf("child: pid1 = %d", pid1);  /* B */
        }
        else {  /* parent process */
            pid1 = getpid();
            printf("parent: pid = %d", pid);    /* C */
            printf("parent: pid1 = %d", pid1);  /* D */
            wait(NULL);
        }

        return 0;
    }

    A: "child: pid = 0"
    B: "child: pid1 = 2603"

    C: "parent: pid = 2603"
    D: "parent: pid1 = 2600"

    For the child process, pid must be 0 for the else-if clause to be satisfied.
    Then, the getpid() call returns the pid of the calling process (in this case,
    2603, the child process). For the parent segment (the else clause), pid will
    be the result of calling fork(), which is the pid of the created child process
    (2603). Then, getpid() will return the parent processes' pid, 2600.

3) Using the program shown below, EXPLAIN what the output will be at Line A.
That is, don't simply write down what the output is. Determine what the output is,
and explain how you arrived at your answer.

    #include <sys/types.h>
    #include <stdio.h>
    #include <unistd.h>

    int value = 5;

    int main()
    {
        pid_t pid;

        pid = fork();

        if (pid == 0) {  /* child process */
            value += 15;
            return 0;
        }
        else if (pid > 0) {  /* parent process */
            wait(NULL);
            printf("PARENT: value = %d\n", value);  /* LINE A */
            return 0;
        }
    }

    OUTPUT: "PARENT: value = 5"

    The final printout of the variable "value" will be unaffected by the
    increment in the if clause of the if-else-if statement. The incrementation
    is done after a call to fork(), and only if the code is executed by the child
    process. Since fork() creates a *copy* of the code, the incrementation of
    "value" in this clause only affects the *copy* of the global variable "value".
    When the else-if clause is executed, it is done by the parent process which
    will only see its unmodified copy of "value".